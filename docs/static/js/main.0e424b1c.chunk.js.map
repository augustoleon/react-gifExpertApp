{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAE3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAbW,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OAEvCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SArBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,uBCNnBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,0FAG6EC,UAAUH,GAHvF,sBAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCAPO,EAAc,SAAC,GAAc,IAAbF,EAAY,EAAZA,OAGzB,OACI,mCAGQA,EAAOJ,KAAK,gBAAEE,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAOV,EAAb,EAAaA,IAAb,OACR,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,kCAAMA,EAAN,SAF0DD,SCNrEQ,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAGvB,ECHwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAd,GACPY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAIlB,CAAEpB,IAGEqB,EDjB2BI,CAAazB,GAAjCa,EAAd,EAAQN,KAAca,EAAtB,EAAsBA,QAGtB,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAoDhB,IAGlDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEb,qBAAKA,UAAU,YAAf,SACA,cAAC,EAAD,CAAaH,OAASA,UEdrBa,EAAe,WACxB,MAAoCxC,mBAAS,CAAC,gBAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAKA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQ0C,EAAWlB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCdlC4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0e424b1c.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue( e.target.value )\r\n    };\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        // .trim() quita los espacios vacios del principio y el final\r\n        if(inputValue.trim().length > 2){\r\n            // No tengo el acceso a las categories, por eso la llamo como arrowF\r\n            setCategories( cate => [inputValue, ...cate]); \r\n            // Para que no haga un doble posteo \r\n            setInputValue('');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }> \r\n            <input\r\n                type='text'\r\n                value= {inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\n// Es requerido el setCategories\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n\r\n    \r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=Y5gZ5le6c4Y9qjDd711Sn8aH3dd3HK6b&q=${ encodeURI(category) }&limit=10`\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({images}) => {\r\n\r\n    \r\n    return (\r\n        <>  \r\n            \r\n            {\r\n                images.map( ({id, title, url}) => (\r\n                    <div className='card animate__animated animate__fadeIn' key={ id }> \r\n                        <img src={ url } alt={title}/>\r\n                        <p> { title } </p>\r\n                        \r\n                    </div>\r\n                ))\r\n            }\r\n        \r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( { category } ) => {\r\n\r\n    // Para renombrar el destructuring, \": (nuevo nombre)\"\r\n    const { data: images, loading } = useFetchGifs(category);    \r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\r\n\r\n            {/* Si la primera condicion es true, entonces carga la siguiente   */}\r\n            { loading && <p className='animate__animated animate__flash'>Loading</p> }\r\n\r\n            <div className='card-grid'>\r\n            <GifGridItem images={ images }/>\r\n            \r\n            </div>     \r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from 'react'; \r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {  \r\n        \r\n        getGifs( category )\r\n            .then( img => {\r\n            setState({\r\n                data: img,\r\n                loading: false\r\n            })\r\n            });\r\n        \r\n    }, [ category ]); // Si la categorÃ­a cambia va a volver a generar este efecto\r\n\r\n\r\n    return state // { data: [], loading: true}\r\n    \r\n}\r\n","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Dragon Ball']);\r\n\r\n    // const handleAdd = () => setCategories( [...categories, 'Naruto']);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n\r\n\r\n            <ol>\r\n                { \r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                            key={ category }\r\n                            category={ category }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}